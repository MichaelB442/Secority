wiremask.eu to get a string for buffer overflow

Buffer Overflow Terms 
  Heap || Memory that can be allocated and deallocated
  Stack || A contiguous section of memory used for passing arguments
  Registers || Storage elements as close as possible to the central processing unit (CPU)
  Instruction Pointer (IP) || a.k.a Program Counter (PC), contains the address of next instruction to be executed
  Stack Pointer (SP) || Contains the address of the next available space on the stack
  Base Pointer (BP) || The base of the stack
  Function || Code that is separate from the main program that is often used to replace code the repeats in order to make the program smaller and more efficient
  Shellcode || The code that is executed once an exploit successfully takes advantage of a vulnerability

Buffer Overflow Defenses
  Non executable (NX) stack
  Address Space Layout Randomization (ASLR) -- randomize the location so it cant all be over written
  Data Execution Prevention (DEP)
  Stack Canaries -- randomized numbers in the stack that when overwritten halt the executable
  Position Independent Executable (PIE)

Tools
  IDA, GHIDRA
  GDB, MONA, IMMUNITY
  BASH, PYTHON

GDB
disass -- disassemble a portion of a program
x/256c $<register> read characters from specific register
break <address> establish a break point

Z:\Strings.exe C:\Users\student\func


 
./func <<<$(echo "aaaaaaaaaaaaaaaaaaaaaaaaaaaa")
Do not have to be in gdb to run this script
./func <<<$(./scriptExDev)


gdb func -- open gdb on func

run -- runs executable

shell -- opens a shell

pdisass getuserinput 

run <<<$(./scriptExDev)

env - gdb ./func
  show env
  unset env LINES
  unset env COLUMNS
  info proc map

msf
use payload/linux/x86/exec
generate -b '\x00' -f python
or
msfvenom -p /linux/x86/exec CMD=whoami -b '\x00' -f python

















